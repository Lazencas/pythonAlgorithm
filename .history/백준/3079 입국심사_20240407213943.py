# 문제
# 상근이와 친구들은 오스트레일리아로 여행을 떠났다. 상근이와 친구들은 총 M명이고, 지금 공항에서 한 줄로 서서 입국심사를
# 기다리고 있다. 입국심사대는 총 N개가 있다. 각 입국심사관이 심사를 하는데 걸리는 시간은 사람마다 모두 다르다.
# k번 심사대에 앉아있는 심사관이 한 명을 심사를 하는데 드는 시간은 Tk이다.

# 가장 처음에 모든 심사대는 비어있고, 심사를 할 준비를 모두 끝냈다. 상근이와 친구들은 비행기 하나를 전세내고
#  놀러갔기 때문에, 지금 심사를 기다리고 있는 사람은 모두 상근이와 친구들이다. 한 심사대에서는 한 번에 한 사람만 
#  심사를 할 수 있다. 가장 앞에 서 있는 사람은 비어있는 심사대가 보이면 거기로 가서 심사를 받을 수 있다. 
#  하지만 항상 이동을 해야 하는 것은 아니다. 더 빠른 심사대의 심사가 끝나길 기다린 다음에 그 곳으로 가서 심사를 받아도 된다.

# 상근이와 친구들은 모두 컴퓨터 공학과 학생이기 때문에, 어떻게 심사를 받으면 모든 사람이 심사를 받는데 걸리는 시간이
# 최소가 될지 궁금해졌다.

#예를 들어, 두 심사대가 있고, 심사를 하는데 걸리는 시간이 각각 7초와 10초라고 하자. 
#줄에 서 있는 사람이 6명이라면, 가장 첫 두 사람은 즉시 심사를 받으러 가게 된다. 7초가 되었을 때,
#첫 번째 심사대는 비어있게 되고, 세 번째 사람이 그곳으로 이동해서 심사를 받으면 된다. 10초가 되는 순간, 
#네 번째 사람이 이곳으로 이동해서 심사를 받으면 되고, 14초가 되었을 때는 다섯 번째 사람이 첫 번째 심사대로 이동해서
#심사를 받으면 된다. 20초가 되었을 때, 두 번째 심사대가 비어있게 된다. 하지만, 여섯 번째 사람이 그 곳으로 이동하지 않고,
#1초를 더 기다린 다음에 첫 번째 심사대로 이동해서 심사를 받으면, 모든 사람이 심사를 받는데 걸리는 시간이 28초가 된다.
#만약, 마지막 사람이 1초를 더 기다리지않고, 첫 번째 심사대로 이동하지 않았다면, 모든 사람이 심사를 받는데 걸리는 시간이
#30초가 되게 된다.

# 상근이와 친구들이 심사를 받는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N과 M이 주어진다. (1 ≤ N ≤ 100,000, 1 ≤ M ≤ 1,000,000,000)

# 다음 N개 줄에는 각 심사대에서 심사를 하는데 걸리는 시간인 Tk가 주어진다. (1 ≤ Tk ≤ 10^9)

# 출력
# 첫째 줄에 상근이와 친구들이 심사를 마치는데 걸리는 시간의 최솟값을 출력한다.
'''
10만개 이하의 입국심사대 N, 10억 이하의 친구? M 미쳣나 무슨 친구가 10억명이야?
지구인구 7분의1이 니 친구야? 비행기 전세내는 것부터 이상하다 싶엇는데 적당히해야지;;
시간제한 1초, 메모리 128MB

모두 심사를 마치는데 걸리는 최소시간을 구해야한다. 어떻게?
이게 이진 탐색인가? 
1초~ 다 제일 큰 곳으로 몰려가는 가장 오래걸리는 시간 초 잡고
시간계산하고 mid로 심사한 사람의 수가 M보다 많으면 right 줄이고
M보다 적으면 left 높이기

'''
import sys
input = sys.stdin.readline
N, M = map(int,input().split())
judges =[]
for i in range(N):
    judge = int(input())
    judges.append(judge)
ans = 0
#반복문 짜고 1초~ 가장 오래걸리는 시간 left, right 잡기
left , right = 1, (max(judges))*M
while left <= right:
    #근데 그 시간동안 몇명 검사했는지 어떻게 알지? > 돌아가면서 다 나눈 몫을 다 합치면 됨
    mid = (left+right)//2
    people = 0
    for judge in judges:
        people += mid//judge
        if people >= M:
            break

    if people >= M:
        ans = mid
        right = mid-1
    else:
        left = mid+1
print(ans)
    

